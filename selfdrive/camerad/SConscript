import subprocess
Import('env', 'arch', 'cereal', 'messaging', 'common', 'gpucommon', 'visionipc', 'USE_WEBCAM')

real_arch = arch = subprocess.check_output(["uname", "-m"], encoding='utf8').rstrip()

android_version = 0
if arch == "aarch64":
  android_version = subprocess.check_output(["getprop", "ro.build.version.release"], encoding='utf8').rstrip()
libs = ['m', 'pthread', common, 'jpeg', 'OpenCL', 'yuv', cereal, messaging, 'zmq', 'capnp', 'kj', visionipc, gpucommon, 'ion', 'lzma', 'xml2']

if android_version == '10':
  libs += [File('#third_party/android_libs/libgsl.so'), File('#third_party/android_libs/libandroidicu.so'), File('#third_party/android_libs/libnativehelper.so')]

if arch == "aarch64":

  libs += ['gsl', 'CB', 'adreno_utils', 'EGL', 'GLESv3', 'cutils', 'ui', 'android', 'binder', 'camera2ndk', 'mediandk', 'utils']
  cameras = ['cameras/camera_android.cc', 'cameras/android/image_reader.cc', 'cameras/android/native_camera.cc']
  env = env.Clone()
  env.Append(CXXFLAGS = '-D__ANDROID_API__=29')
  env.Append(CXXFLAGS = '-DYUV_ONLY')
  env.Append(CPPPATH = ['/usr/local/include/opencv4'])
  env['LIBPATH'] = ['/system/lib64'] + env['LIBPATH']
  env['ENV']['LD_LIBRARY_PATH'] = ['/system/lib64'] + env['ENV']['LD_LIBRARY_PATH']
elif arch == "larch64":
  libs += ['atomic']
  cameras = ['cameras/camera_qcom2.cc']
else:
  env['CXXFLAGS'] += ["-Wno-deprecated-declarations"]
  if USE_WEBCAM:
    libs += ['opencv_core', 'opencv_highgui', 'opencv_imgproc', 'opencv_videoio']
    cameras = ['cameras/camera_webcam.cc']
    env = env.Clone()
    env.Append(CXXFLAGS = '-DWEBCAM')
    env.Append(CFLAGS = '-DWEBCAM')
    env.Append(CPPPATH = ['/usr/include/opencv4', '/usr/local/include/opencv4'])
  else:
    libs += ['avutil', 'avcodec', 'avformat', 'bz2', 'ssl', 'curl', 'crypto']
    # TODO: import replay_lib from root SConstruct
    cameras = ['cameras/camera_replay.cc',
      env.Object('camera-util', '#/selfdrive/ui/replay/util.cc'),
      env.Object('camera-framereader', '#/selfdrive/ui/replay/framereader.cc'),
      env.Object('camera-filereader', '#/selfdrive/ui/replay/filereader.cc')]

  if arch == "Darwin":
    del libs[libs.index('OpenCL')]
    del libs[libs.index(gpucommon)][gpucommon.index('GL')]
    env = env.Clone()
    env['FRAMEWORKS'] = ['OpenCL', 'OpenGL']

env.Program('camerad', [
    'main.cc',
    'cameras/camera_common.cc',
    'transforms/rgb_to_yuv.cc',
    'imgproc/utils.cc',
    cameras,
  ], LIBS=libs)

if GetOption("test"):
  env.Program('test/ae_gray_test', [
      'test/ae_gray_test.cc',
      'cameras/camera_common.cc',
      'transforms/rgb_to_yuv.cc',
    ], LIBS=libs)
